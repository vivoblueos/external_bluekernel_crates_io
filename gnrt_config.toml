# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file configures how to generate GN rules for third-party Rust crates.
#
# `[crate.foo]` sections below can configure generation of `BUILD.gn` and/or
# `README.chromium` by specifying the following options:
#
# allow_first_party_usage: If false, the crate should not be visible to first
#   party code even though it is present in the Cargo.toml file. It defaults to
#   true. Use this if you need to control features for a crate that is only
#   meant for use as a transitive dependency of third-party crates.
#   e.g. allow_first_party_usage = false
#
# ban_features: A list of crate features that are disallowed in Chromium.
#   Typically `ban_features` is used when a crate-feature-gated code failed or
#   hasn't gone through a security audit.
#
# build_script_outputs: A list of file paths, rooted from where the BUILD.gn
#   file is located, of files generated by the crate's build script.
#   e.g. build_script_outputs = [ "crate/src/gen/gen_stuff.rs" ]
#
# extra_input_roots: A list of additional arbitrary files and/or directories
#   that are part of the crate (these need to be listed as `inputs` in the
#   generated `BUILD.gn`).  An example scenario that needs `extra_input_roots`
#   is when a crate uses `include_str!` to include `README.md` as a doc
#   comment.
#
# extra_src_roots: A list of additional Rust sources that come from outside of
#   the crate's `src` directory (these need to be added to `sources` in the
#   generated `BUILD.gn`).  An example scenario that needs `extra_src_roots` is
#   when a crate uses generated code via `include!("../generated/foo.rs")`.
#
# group: One of 'safe', 'sandbox', or 'test. This indicates where the library
#   is allowed to be used and where its GN rules will be written.
#
#   The group of least privilege is inherited by a crate C from all crates that
#   depend on C transitively. For crates listed in Cargo.toml, and not depended
#   on by other crates, the default is 'safe'.
#   TODO(danakj): The default should probably be 'sandbox'?
#
#   'safe': The library satisfies the rule-of-2 and can be used in any process.
#   'sandbox': The library does not satisfy the rule-of-2 and must be used in
#              a sandboxed process such as the renderer or a utility process.
#   'test': The library is only used in tests.
#
# license: The name of the license. This should normally be populated from the
#   crate's Cargo.toml, but it can be specified to override it.
#
# license_files: A list of license files, relative to the crate's root.
#   This is normally found automatically based on convention, but it can be
#   specified to override it. A license file is expected for all shipped
#   libraries.
#
# security_critical: A boolean that overrides if the crate is marked security-
#   critical in the README.chromium. It defaults to true if the crate is not in
#   the 'test' group/.
#
# shipped: A boolean that overrides if the crate is marked shipped in the
#   README.chromium. It defaults to true if the crate is not in the 'test'
#   group.
#
# bin_targets: A list of binary target names to cover.  This list is empty by
#   default, which means that the default generated `BUILD.gn` will only cover
#   the library target (if any) of the package.
#
# Additional, less commonly needed options can also be discovered by reading
# the doc comments in `//tools/crates/gnrt/lib/config.rs` (e.g. `CrateConfig`'s
# fields correspond to per-crate options like `extra_input_roots`).

[gn]
build_file_template = "BLUE_BUILD.gn.hbs"
readme_file_template = "README.blueos.hbs"
removed_cargo_template = "removed_Cargo.toml.hbs"
removed_librs_template = "removed_lib.rs.hbs"

[vet]
config_template = "vet_config.toml.hbs"

[resolve]
root = "bluekernel_crates_io"
# These crates are dependencies in some configurations, but we don't use them.
remove_crates = [
    # C/C++ dependencies must be explicitly writting in GN rules somehow.
    'cc',
    'link-cplusplus',
    'shlex',
    # minimal-lexical is unsound see https://crrev.com/c/4977110 for more info.
    # It is a dependency of nom, but not actually used.
    'minimal-lexical',
    # Windows targets that we do not ever target.
    'windows_aarch64_gnullvm',
    'windows_i686_gnu',
    'windows_i686_gnullvm',
    'windows_x86_64_gnu',
    'windows_x86_64_gnullvm',
    # Behind a feature that we do not enable.
    'wasi'
]

#[crate.pinned-init-macro]
#license_files = ["../LICENSE-APACHE", "../LICENSE-MIT"]